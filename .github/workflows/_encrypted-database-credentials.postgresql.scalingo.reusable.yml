name: zReusable - Get encrypted database connexion info from scalingo env var

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string

    secrets:
      SCALINGO_API_TOKEN:
        required: true
      GPG_SECRET_SIGNING_PASSPHRASE:
        required: true

    outputs:
      user:
        description: 'Database user'
        value: ${{ jobs.set-encrypted-outputs.outputs.user }}
      password:
        description: 'Database password'
        value: ${{ jobs.set-encrypted-outputs.outputs.password }}
      host:
        description: 'Database host'
        value: ${{ jobs.set-encrypted-outputs.outputs.host }}
      port:
        description: 'Database port'
        value: ${{ jobs.set-encrypted-outputs.outputs.port }}
      database:
        description: 'Database name'
        value: ${{ jobs.set-encrypted-outputs.outputs.database }}

jobs:
    # Copy of _get-workspace-id.terraform.reusable.yml, using raw for call depth issues
    set-encrypted-outputs:
      name: Extract the database-user (same value) identifier
      runs-on: ubuntu-latest
      container:
        image: rcambonie/scalingo-cli

      outputs:
        user: ${{ steps.credentials.outputs.user }}
        password: ${{ steps.credentials.outputs.password }}
        host: ${{ steps.credentials.outputs.host }}
        port: ${{ steps.credentials.outputs.port }}
        database: ${{ steps.credentials.outputs.database }}

      steps:
        - name: Login with api-token
          run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

        - name: Extract fields from connexion string
          id: credentials
          shell: bash
          run: >-
            TARGET_DATABASE_URL=$(scalingo --app ${{ inputs.application-name }} env | grep SCALINGO_POSTGRESQL_URL=)
            
            TARGET_DATABASE_URL=${TARGET_DATABASE_URL//SCALINGO_POSTGRESQL_URL/}
            
            regex='postgres://(.+):(.+)@(.+):(.+)/(.+)\?'
            
            [[ $TARGET_DATABASE_URL =~ $regex ]]
            
            ENCRYPTED_USER=$(
            gpg --symmetric --batch 
            --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
            --output - <(echo "${BASH_REMATCH[1]}") 
            | base64 -w0
            )
            
            echo "::set-output name=user::$ENCRYPTED_USER"
            
            ENCRYPTED_PASSWORD=$(
            gpg --symmetric --batch 
            --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
            --output - <(echo "${BASH_REMATCH[2]}") 
            | base64 -w0
            )
            
            echo "::set-output name=password::$ENCRYPTED_PASSWORD"
            
            ENCRYPTED_HOST=$(
            gpg --symmetric --batch 
            --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
            --output - <(echo "${BASH_REMATCH[3]}") 
            | base64 -w0
            )

            echo "::set-output name=host::$ENCRYPTED_HOST"

            ENCRYPTED_PORT=$(
            gpg --symmetric --batch 
            --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
            --output - <(echo "${BASH_REMATCH[4]}") 
            | base64 -w0
            )

            echo "::set-output name=port::$ENCRYPTED_PORT"
            
            ENCRYPTED_DATABASE=$(
            gpg --symmetric --batch 
            --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
            --output - <(echo "${BASH_REMATCH[5]}") 
            | base64 -w0
            )

            echo "::set-output name=database::$ENCRYPTED_DATABASE"