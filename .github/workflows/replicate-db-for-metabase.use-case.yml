# TODO For now this is a staging copy that deploy the code with an empty db used to tests tasks
# This is a Work In Progress
name: Replicate db for metabase

on:
  workflow_call:
#  push:
#    branches:
#      - master

env:
  application-name: "immersion-facile-db-replication"
  node-version: "16.15.0"
  addon-plan-postgresql: "postgresql-starter-1024"

jobs:
  dynamic-variables:
    outputs:
      node-version: ${{ steps.node-version.outputs.value }}
      application-name: ${{ steps.application-name.outputs.value }}
      addon-plan-postgresql: ${{ steps.addon-plan-postgresql.outputs.value }}
      is-discord-hooked: ${{ steps.is-discord-hooked.outputs.value }}
      deployed-domain: ${{ steps.deployed-domain.outputs.value }}

    runs-on: ubuntu-latest
    steps:
      - name: Node version from env variable
        id: node-version
        run: |
          NODE_VERSION=${{ env.node-version }}
          echo "::set-output name=value::$NODE_VERSION"

      - name: Deployed application base name
        id: application-name
        run: |
          APPLICATION_NAME=${{ env.application-name }}
          echo "::set-output name=value::$APPLICATION_NAME"

      - name: Scalingo postgresql addon plan
        id: addon-plan-postgresql
        run: |
          POSTGRESQL_PLAN=$(echo ${{ env.addon-plan-postgresql }})
          echo "::set-output name=value::$POSTGRESQL_PLAN"

      - name: Has a discord webhook for notification been defined
        id: is-discord-hooked
        run: |
          IS_HOOKED=${{ secrets.DISCORD_NOTIFY_HOOK_URL != '' }}
          echo "::set-output name=value::$IS_HOOKED"

      - name: Deployed domain url
        id: deployed-domain
        run: |
          DEPLOYED_DOMAIN=${{ env.application-name }}.osc-fr1.scalingo.io
          echo "::set-output name=value::$DEPLOYED_DOMAIN"

  dependencies:
    runs-on: ubuntu-latest
    needs:
      - dynamic-variables

    outputs:
      pnpm_cache_path: ${{ steps.pnpm-cache.outputs.path }}
      pnpm_cache_key: ${{ steps.pnpm-cache.outputs.key }}

    steps:
      - name: Retrieve the branch files
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.2.2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Expose pnpm cache configurationstore directory
        id: pnpm-cache
        run: |
          echo "::set-output name=path::$(pnpm store path)"
          echo "::set-output name=key::${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.path }}
          key: ${{ steps.pnpm-cache.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup node ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

  build:
    needs:
      - dependencies

    runs-on: ubuntu-latest

    steps:
      - name: Retrieve the branch files
        uses: actions/checkout@v3

      - name: Retreives dependencies
        uses: actions/cache@v3
        with:
          key: ${{ needs.dependencies.outputs.pnpm_cache_key }}
          path: ${{ needs.dependencies.outputs.pnpm_cache_path }}

      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Setup node ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

      - name: Build
        run: |
          pnpm back build
          pnpm database build

      # Including 'shared' as it contains its built bundle
      - name: Upload build bundle as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-bundle
          path: |
            back/dist
            database/dist
            database/staticData
            shared

  validation:
    needs:
      - dependencies

    uses: ./.github/workflows/_validation.reusable.yml
    with:
      cache-path: ${{ needs.dependencies.outputs.pnpm_cache_path }}
      cache-key: ${{ needs.dependencies.outputs.pnpm_cache_key }}
      node-version: ${{ needs.dependencies.outputs.node-version }}

  # TODO Better error management !
  # Right now some steps in this job may fail silently
  deploy-back:
    needs:
      - dynamic-variables
      - build
      - validation
    uses: ./.github/workflows/_deploy-application-back.scalingo.reusable.yml
    with:
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
      scalingo-remote-domain-url: "git@ssh.osc-fr1.scalingo.com"
      scalingo-ssh-host-domain: "ssh.osc-fr1.scalingo.com"
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  setup-database-addon:
    needs:
      - dynamic-variables
      - deploy-back
    uses: ./.github/workflows/_setup-addon.postgresql.scalingo.reusable.yml
    with:
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
      addon-plan-postgresql: ${{ needs.dynamic-variables.outputs.addon-plan-postgresql }}
      add-extention: true
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  # TODO Extract dependencies from database/package.json
  migrate-database:
    needs:
      - dynamic-variables
      - setup-database-addon
    uses: ./.github/workflows/_migrate.postgresql.scalingo.reusable.yml
    with:
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
      migration-dependencies: "node-pg-migrate pg-format date-fns fs-extra ramda zod"
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  clone-immersion-pe-db-data:
    needs:
      - dynamic-variables
      - migrate-database
    uses: ./.github/workflows/_dump-restore-remote-data.postgresql.scalingo.reusable.yml
    with:
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      REMOTE_DATABASE_URL: ${{ secrets.PE_PRODUCTION_DATABASE_URL }}

  notify-discord:
    if: ${{ needs.dynamic-variables.outputs.is-discord-hooked == 'true' }}
    needs:
      - dynamic-variables
      - clone-immersion-pe-db
    uses: ./.github/workflows/_notify-deployment.discord.reusable.yml
    with:
      deployer-name: "Scalingo Back Deployer"
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
      deployed-domain: ${{ needs.dynamic-variables.outputs.deployed-domain }}
    secrets:
      DISCORD_NOTIFY_HOOK_URL: ${{ secrets.DISCORD_NOTIFY_HOOK_URL }}
