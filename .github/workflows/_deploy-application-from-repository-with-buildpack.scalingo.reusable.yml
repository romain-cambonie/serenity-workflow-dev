name: zReusable Application Deployer From Repository Scalingo
#prepare-application
#deploy-from-repository-with-buildpack
#cleanup-deploy-keys

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
        # Should have a maximum length of 47 characters
      repository-url:
        required: true
        type: string
      deployer-private-ssh-key:
        required: true
        type: string
      scalingo-remote-git-url:
        required: false
        type: string
        default: "git@ssh.osc-fr1.scalingo.com"
      scalingo-deployed-domain-url:
        required: false
        type: string
        default: ".osc-fr1.scalingo.io"
      scalingo-ssh-host-domain:
        required: false
        type: string
        default: "ssh.osc-fr1.scalingo.com"

    secrets:
      SCALINGO_API_TOKEN:
        required: true

jobs:
  deploy-from-repository-with-buildpack:
    runs-on: ubuntu-latest
    steps:
      - name: Initialise a local git repository for deployment (a scalingo deployment is a push to their remote)
        run: |
          git clone ${{ inputs.repository-url }} .
          rm -rf .git
          git config --global init.defaultBranch master
          git config --global user.email dummy@email.fr
          git config --global user.name ScalingoDeployer
          git config --global push.autoSetupRemote true
          git init .
          git add .
          git remote add scalingo ${{ inputs.scalingo-remote-git-url }}:${{ inputs.application-name }}.git
          git commit -m "Cloned repo"

      - name: Set up ssh authentification to scalingo by setting the private key and known_hosts file
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ inputs.deployer-private-ssh-key }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ inputs.scalingo-ssh-host-domain }} >> ~/.ssh/known_hosts

      - name: Deploy - Push to remote to deploy
        run: |
          OUTPUT_AS_MULTILINE=$(git push scalingo -f)
          OUTPUT_AS_HYBRID="${OUTPUT_AS_MULTILINE//'%'/'%25'}"
          OUTPUT_AS_HYBRID="${OUTPUT_AS_HYBRID//$'\n'/'%0A'}"
          OUTPUT_AS_SINGLELINE="${OUTPUT_AS_HYBRID//$'\r'/'%0D'}"
          set +e
          $HAS_ERROR=$($OUTPUT_AS_SINGLELINE | grep -c 'Error deploying the application' }})
          set -e
          if [[ $HAS_ERROR -eq 1 ]]; then exit 1; fi


  cleanup-deploy-keys:
    needs:
      - deploy-from-repository-with-buildpack

    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Remove the transient ssh-key from logged profile
        run: scalingo keys-remove ${{ inputs.application-name }}
        continue-on-error: true