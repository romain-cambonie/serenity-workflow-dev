# This is a Work In Progress
# Example usage
# my-replication-job:
#   uses: romain-cambonie/serenity-workflows/.github/workflows/replicate-db.use-case.yml@master
#   with:
#     application-name: 'my-app'
#     addon-plan-postgresql: 'postgresql-starter-1024'
#     extensions: 'postgis,hstore'
#   secrets:
#     SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

name: Replicate a remote database a standalone app

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      addon-plan-postgresql:
        required: true
        type: string
      extensions:
        required: false
        type: string
        default: ''
    secrets:
      SCALINGO_API_TOKEN:
        required: true
      REMOTE_DATABASE_URL:
        required: true

jobs:
  variables-from-database-url:
    name: Dump and restore the production database to the feature app
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli

    outputs:
      pg-user: ${{ steps.variables.outputs.pg-user }}
      pg-password: ${{ steps.variables.outputs.pg-password }}
      pg-server: ${{ steps.variables.outputs.pg-server }}
      pg-database: ${{ steps.variables.outputs.pg-database }}

    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Extract pg-user and database name from connexion string
        id: variables
        run: |
          TARGET_DATABASE_URL=$(scalingo --app ${{ inputs.application-full-name }} env | grep SCALINGO_POSTGRESQL_URL)
          TARGET_DATABASE_URL=${TARGET_DATABASE_URL//SCALINGO_POSTGRESQL_URL=/}
          regex='postgres://(.+):(.+)@(.+)/(.+)?'
          [[ $TARGET_DATABASE_URL =~ $regex ]]
          echo 'plop'
          echo ${BASH_REMATCH[1]}
          echo ${BASH_REMATCH[2]}
          echo ${BASH_REMATCH[3]}
          echo ${BASH_REMATCH[4]}
          echo 'plip'
          echo "::set-output name=pg-user::${BASH_REMATCH[1]}" 
          echo "::set-output name=pg-password::${BASH_REMATCH[2]}"
          echo "::set-output name=pg-server::${BASH_REMATCH[3]}"
          echo "::set-output name=pg-database::${BASH_REMATCH[4]}"

  create-application-on-scalingo:
    needs:
      - variables-from-database-url
    uses: romain-cambonie/serenity-workflows/.github/workflows/_prepare-application-and-keys.scalingo.reusable.yml@master
    with:
      application-name: ${{ inputs.application-name }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  setup-database-addon:
    needs:
      - create-application-on-scalingo

    uses: romain-cambonie/serenity-workflows/.github/workflows/_setup-addon.postgresql.scalingo.reusable.yml@master
    with:
      application-name: ${{ inputs.application-name }}
      addon-plan-postgresql: ${{ inputs.addon-plan-postgresql }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  wait-addon-running:
    needs:
      - setup-database-addon

    runs-on: ubuntu-latest
    steps:
      - name: Wait for addon
        run: sleep 120s

  # TODO Change target workflow to
  # romain-cambonie/serenity-workflows/.github/workflows/_create-extension.postgresql.scalingo.reusable.yml@master
  # when ready
  install-postgresql-extensions:
    needs:
      - setup-database-addon
      - wait-addon-running

    if: inputs.extensions

    uses: romain-cambonie/serenity-workflow-dev/.github/workflows/_create-extension.postgresql.scalingo.reusable.yml@master
    with:
      extensions-as-comma-separated-string: ${{ inputs.extensions }}
      application-name: ${{ inputs.application-name }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  replicate-remote-db:
    needs:
      - install-postgresql-extensions

    if: needs.install-postgresql-extensions.result == 'success' || needs.install-postgresql-extensions.result != 'skipped'

    uses: ./.github/workflows/_replicate-remote-db.postgresql.scalingo.reusable.yml
    with:
      application-name: ${{ inputs.application-name }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      REMOTE_DATABASE_URL: ${{ secrets.REMOTE_DATABASE_URL }}

#  notify-discord:
#    if: ${{ needs.dynamic-variables.outputs.is-discord-hooked == 'true' }}
#    needs:
#      - dynamic-variables
#      - clone-immersion-pe-db
#    uses: ./.github/workflows/_notify-deployment.discord.reusable.yml
#    with:
#      deployer-name: "Scalingo Back Deployer"
#      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
#      deployed-domain: ${{ needs.dynamic-variables.outputs.deployed-domain }}
#    secrets:
#      DISCORD_NOTIFY_HOOK_URL: ${{ secrets.DISCORD_NOTIFY_HOOK_URL }}
