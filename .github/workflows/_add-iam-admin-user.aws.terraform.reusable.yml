name: zReusable - Add AWS credentials to workspace

on:
  workflow_call:
    inputs:
      workspace-name-with-prefix:
        required: true
        type: string
      organisation-name:
        required: true
        type: string
      iam-name:
        required: true
        type: string
      terraform-api-organizations-endpoint:
        required: false
        type: string
        default: 'https://app.terraform.io/api/v2/organizations/'
      terraform-workspace-api-endpoint:
        required: false
        type: string
        default: 'https://app.terraform.io/api/v2/workspaces/'

    secrets:
      TF_API_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GPG_SECRET_SIGNING_PASSPHRASE:
        required: true

jobs:
  workspace-already-exist:
    runs-on: ubuntu-latest
    container: vladgh/gpg:sha-fd85ad7
    steps:
      - name: test
        run: gpg --full-gen-key


      # Copy of _get-workspace-id.terraform.reusable.yml, using raw for call depth issues
  get-workspace-id:
    runs-on: ubuntu-latest
    outputs:
      workspace-id: ${{ steps.get-workspace-id.outputs.workspace-id }}
    steps:
      - name: Execute api request
        id: get-workspace-id
        run: >-
          WORKSPACE_ID=$(curl
          --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}"
          --header "Content-Type: application/vnd.api+json"
          --request GET
          ${{ inputs.terraform-api-organizations-endpoint }}${{ inputs.organisation-name }}/workspaces/${{ inputs.workspace-name-with-prefix }}
          | jq '.data.id')
        
          echo "::set-output name=workspace-id::$WORKSPACE_ID"

  

  json-payloads:
    runs-on: ubuntu-latest
    outputs:
      admin-users-hcl-payload: ${{ steps.admin-users-hcl-payload.outputs.payload }}

    steps:
      - name: Generate admin users hcl payload
        id: admin-users-hcl-payload
        run: >-
          ADMIN_USERS_JSON_PAYLOAD=$(
          jq -r '.' <<< '
          {
            "data": 
              { 
                "type": "vars", 
                "attributes": {
                  "key": "admin_users",
                  "value": { 
                    '"${{inputs.iam-name}}" = { pgp_key_base_64 = "inputs.pgp_key_base_64" }'
                  },
                  "description":"AwsHumanAdminAccount",
                  "category":"terraform",
                  "hcl":true,
                  "sensitive": false
                } 
              }
          }')
          
          ADMIN_USERS_JSON_PAYLOAD_WITHOUT_WHITESPACES=$(echo $ADMIN_USERS_JSON_PAYLOAD | sed 's/ //g')

          ENCRYPTED_PAYLOAD=$(
          gpg --symmetric --batch 
          --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
          --output - <(echo "$ADMIN_USERS_JSON_PAYLOAD_WITHOUT_WHITESPACES") 
          | base64 -w0
          )

          echo "::set-output name=payload::$ENCRYPTED_PAYLOAD"
          

  # Copy of _set-workspace-variable.terraform.reusable.yml, using raw for call depth issues
  set-workspace-variable:
    runs-on: ubuntu-latest
    needs:
      - get-workspace-id
      - json-payloads
    strategy:
      matrix:
        include: 
          - var: "admin-users"
            data: ${{ needs.json-payloads.outputs.admin-users-payload }}

    steps:
      - name: Set ${{ matrix.var }} variable on workspace
        run: >-
          gpg --decrypt --quiet --batch 
          --passphrase "${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}"
          --output - <(echo "${{ matrix.data }}" 
          | base64 --decode) > payload
          
          curl -s
          --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}"
          --header "Content-Type: application/vnd.api+json"
          --request POST
          --data @payload
          ${{ inputs.terraform-workspace-api-endpoint }}${{ needs.get-workspace-id.outputs.workspace-id }}/vars
          > /dev/null
