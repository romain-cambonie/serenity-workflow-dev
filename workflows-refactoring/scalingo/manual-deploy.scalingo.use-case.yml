name: Déployer sur Scalingo

on:
  workflow_dispatch:
    inputs:
      application-name:
        description: 'Nom de votre application, doit être unique'
        required: true

env:
  node-version: "lts/*"
  addon-plan-postgresql: "postgresql-starter-512"
  package-manager: 'yarn'
  package-manager-dependencies-command: 'yarn install --frozen-lockfile'

jobs:
  dynamic-variables:
    outputs:
      node-version: ${{ steps.variables.outputs.node-version }}
      application-name: ${{ steps.variables.outputs.application-name }}
      addon-plan-postgresql: ${{ steps.variables.outputs.addon-plan-postgresql }}
      package-manager: ${{ steps.variables.outputs.package-manager }}
      package-manager-dependencies-command: ${{ steps.variables.outputs.package-manager-dependencies-command }}

    runs-on: ubuntu-latest
    steps:
      - name: Interpolated variables from env variables
        id: variables
        run: |
          echo "::set-output name=node-version::${{ env.node-version }}"
          echo "::set-output name=application-name::${{ inputs.application-name }}"
          echo "::set-output name=addon-plan-postgresql::${{ env.addon-plan-postgresql }}"
          echo "::set-output name=package-manager::${{ env.package-manager }}"
          echo "::set-output name=package-manager-dependencies-command::${{ env.package-manager-dependencies-command }}"

  build:
    runs-on: ubuntu-latest
    needs:
      - dynamic-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.dynamic-variables.outputs.node-version }}
          cache: ${{ needs.dynamic-variables.outputs.package-manager }}

      - name: Install frozen dependencies
        run: ${{ needs.dynamic-variables.outputs.package-manager-dependencies-command }}

      - name: Build
        run: |
          ${{ needs.dynamic-variables.outputs.package-manager }} build


      - name: Minimal package.json to run build
        run: |
          touch filtered.json
          cat package.json | jq '{name, version, scripts: {start: .scripts.start}, dependencies}' > filtered.json
          mv filtered.json package.json

      - name: Upload build bundle as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-bundle
          path: |
            package.json
            dist

      # Current artifact / release structure
      # - package.json => buildpack entrypoint (script 'start')
      # /dist
      # | - index.js => application entrypoint
      # | [...] => built files and folders

  validation:
    needs:
      - dynamic-variables
    uses: ./.github/workflows/_validation.reusable.yml
    with:
      node-version: ${{ needs.dynamic-variables.outputs.node-version }}
      package-manager: ${{ needs.dynamic-variables.outputs.package-manager }}
      package-manager-dependencies-command: ${{ needs.dynamic-variables.outputs.package-manager-dependencies-command }}

  deploy:
    needs:
      - dynamic-variables
      - build
      - validation
    uses: ./.github/workflows/_deploy-application.scalingo.reusable.yml
    with:
      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
      scalingo-remote-git-url: "git@ssh.osc-fr1.scalingo.com"
      scalingo-deployed-domain-url: ".osc-fr1.scalingo.com"
      scalingo-ssh-host-domain: "ssh.osc-fr1.scalingo.com"
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}



#  setup-database-addon:
#    needs:
#      - dynamic-variables
#      - deploy-back
#    uses: ./.github/workflows/_setup-addon.postgresql.scalingo.reusable.yml
#    with:
#      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
#      addon-plan-postgresql: ${{ needs.dynamic-variables.outputs.addon-plan-postgresql }}
#      add-extension: true
#    secrets:
#      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
#
#  # TODO Extract dependencies from database/package.json
#  migrate-database:
#    needs:
#      - dynamic-variables
#      - setup-database-addon
#    uses: ./.github/workflows/_migrate.postgresql.scalingo.reusable.yml
#    with:
#      application-name: ${{ needs.dynamic-variables.outputs.application-name }}
#      migration-dependencies: "node-pg-migrate pg-format date-fns fs-extra ramda zod"
#    secrets:
#      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

