name: zReusable Application Deployer From Artifact Scalingo
#prepare-application
#deploy-from-release-artifact
#cleanup-deploy-keys


on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
        # Should have a maximum length of 47 characters
      artifact-name:
        required: true
        type: string
      scalingo-remote-git-url:
        required: false
        type: string
        default: "git@ssh.osc-fr1.scalingo.com"
      scalingo-deployed-domain-url:
        required: false
        type: string
        default: ".osc-fr1.scalingo.io"
      scalingo-ssh-host-domain:
        required: false
        type: string
        default: "ssh.osc-fr1.scalingo.com"

    secrets:
      SCALINGO_API_TOKEN:
        required: true

jobs:
  prepare-application:
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    outputs:
      deployer-private-ssh-key: ${{ steps.deployer-private-ssh-key.outputs.private-key }}
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Create application if needed
        
        run: |
          set +e
          APP_ALREADY_EXIST=$(scalingo apps | grep -c ${{ inputs.application-name }} )
          set -e
          if [[ $APP_ALREADY_EXIST -eq 0 ]]; then scalingo create ${{ inputs.application-name }}; else echo 'App exists already or has an invalid name'; fi

      - name: Generate transient ssh-keys then add the public key to the logged account for deployment
        run: |
          mkdir -p /home/.ssh
          ssh-keygen -q -t rsa -N '' -f /home/.ssh/id_rsa
          scalingo keys-add ${{ inputs.application-name }} /home/.ssh/id_rsa.pub

      - name: Set the generate ssh private key as an output, key value will masked in logs, handling the set-output truncate multiline string behaviours (ref:https://github.community/t/set-output-truncates-multiline-strings/16852)
        id: deployer-private-ssh-key
        run: |
          PRIVATE_KEY_AS_MULTILINE=$(cat /home/.ssh/id_rsa)
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_MULTILINE//'%'/'%25'}"
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_SINGLELINE//$'\n'/'%0A'}"
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_SINGLELINE//$'\r'/'%0D'}"
          echo "::set-output name=private-key::$PRIVATE_KEY_AS_SINGLELINE"

  deploy-from-release-artifact:
    runs-on: ubuntu-latest
    needs:
      - prepare-application

    steps:
      - name: Extract artifact
        uses: actions/download-artifact@v3
        with:
          name: {{ inputs.artifact-name }}

      - name: Initialise a local git repository for deployment (a scalingo deployment is a push to their remote)
        run: |
          rm -rf .git
          git config --global init.defaultBranch master
          git config --global user.email dummy@email.fr
          git config --global user.name ScalingoDeployer
          git config --global push.autoSetupRemote true
          git init .
          git add .
          git remote add scalingo ${{ inputs.scalingo-remote-git-url }}:${{ inputs.application-name }}.git
          git commit -m "Release artifact"

      - name: Set up ssh authentification to scalingo by setting the private key and known_hosts file
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ needs.prepare-application.outputs.deployer-private-ssh-key }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ inputs.scalingo-ssh-host-domain }} >> ~/.ssh/known_hosts

      - name: Deploy - Push to remote to deploy
        run: |
          OUTPUT_AS_MULTILINE=$(git push scalingo -f)
          OUTPUT_AS_HYBRID="${OUTPUT_AS_MULTILINE//'%'/'%25'}"
          OUTPUT_AS_HYBRID="${OUTPUT_AS_HYBRID//$'\n'/'%0A'}"
          OUTPUT_AS_SINGLELINE="${OUTPUT_AS_HYBRID//$'\r'/'%0D'}"
          set +e
          $HAS_ERROR=$($OUTPUT_AS_SINGLELINE | grep -c 'Error deploying the application' }})
          set -e
          if [[ $HAS_ERROR -eq 1 ]]; then exit 1; fi


  cleanup-deploy-keys:
    needs:
      - deploy-from-release-artifact

    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Remove the transient ssh-key from logged profile
        run: scalingo keys-remove ${{ inputs.application-name }}
        continue-on-error: true
