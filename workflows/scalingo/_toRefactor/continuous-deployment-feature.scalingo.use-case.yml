# This is a Work In Progress
name: CD-Feature application on scalingo
# This assume you have the following scripts in the package.json
#build
#test (used in the reusable Validation Workflow)
#lint (used in the reusable Validation Workflow)

on:
  workflow_dispatch:
#  push:
#    branches:
#      - feature/*

env:
  application-name: 'romain-cambonie-test'
  reference-application-name: 'romain-cambonie-test-production'
  node-version: '16.15.0'
  addon-plan-postgresql: 'postgresql-sandbox'

jobs:
  dynamic-variables:
    outputs:
      node-version: ${{ steps.node-version.outputs.value }}
      application-name: ${{ steps.application-name.outputs.value }}
      reference-application-name: ${{ steps.reference-application-name.outputs.value }}
      addon-plan-postgresql: ${{ steps.addon-plan-postgresql.outputs.value }}
      deployment-owner-type: ${{ steps.deployment-owner-type.outputs.value }}
      is-mattermost-hooked: ${{ steps.is-mattermost-hooked.outputs.value }}
      is-discord-hooked: ${{ steps.is-discord-hooked.outputs.value }}
    runs-on: ubuntu-latest
    steps:
      - name: Node version from env variable
        id: node-version
        run: |
          NODE_VERSION=${{ env.node-version }}
          echo "::set-output name=value::$NODE_VERSION"

      - name: Deployed application base name
        id: application-name
        run: |
          APPLICATION_NAME=${{ env.application-name }}
          BRANCH_SHORT_REF=$(echo ${{ github.event.ref }} | cut -d'/' -f 4)
          echo "::set-output name=value::$APPLICATION_NAME-$BRANCH_SHORT_REF"

      - name: Reference application (to copy config / db from)
        id: reference-application-name
        run: |
          REFERENCE_APPLICATION_NAME=${{ env.reference-application-name }}
          echo "::set-output name=value::$REFERENCE_APPLICATION_NAME"

      - name: Scalingo postgresql addon plan
        id: addon-plan-postgresql
        run: |
          POSTGRESQL_PLAN=$(echo ${{ env.addon-plan-postgresql }})
          echo "::set-output name=value::$POSTGRESQL_PLAN"          

      - name: Has a mattermost webhook for notification been defined
        id: is-mattermost-hooked
        run: |
          IS_HOOKED=${{ secrets.MATTERMOST_NOTIFY_HOOK_URL != '' }}
          echo "::set-output name=value::$IS_HOOKED"

      - name: Has a discord webhook for notification been defined
        id: is-discord-hooked
        run: |
          IS_HOOKED=${{ secrets.DISCORD_NOTIFY_HOOK_URL != '' }}
          echo "::set-output name=value::$IS_HOOKED"

      - name: Deployed domain url
        id: deployed-domain
        run: |
          DEPLOYED_DOMAIN=${{ steps.application-name.outputs.value }}.osc-fr1.scalingo.io
          echo "::set-output name=value::$DEPLOYED_DOMAIN"


  dependencies:
    needs:
      - dynamic-variables
    uses: ./.github/workflows/_dependencies.reusable.yml
    with:
      node-version: ${{ needs.dynamic-variables.outputs.node-version }}

  build:
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve the branch files
        uses: actions/checkout@v3

      - name: Retrieve dependencies
        uses: actions/cache@v3
        with:
          key: node_modules-${{ hashFiles('yarn.lock') }}
          path: node_modules

      - name: Build
        run: yarn build

  validation:
    needs: dependencies
    uses: ./.github/workflows/_validation.reusable.yml

  deploy:
    needs:
      - dynamic-variables
      - build
      - validation
    uses: ./.github/workflows/_deploy-application.scalingo.reusable.yml
    with:
      application-full-name: ${{ needs.dynamic-variables.outputs.application-name }}
      scalingo-remote-domain-url: 'git@ssh.osc-fr1.scalingo.com'
      scalingo-ssh-host-domain: 'ssh.osc-fr1.scalingo.com'
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  additional-services:
    needs:
      - dynamic-variables
      - deploy
    uses: ./.github/workflows/_db-postgresql.scalingo.reusable.yml
    with:
      application-full-name: ${{ needs.dynamic-variables.outputs.application-name }}
      reference-application-name: ${{ needs.dynamic-variables.outputs.reference-application-name }}
      addon-plan-postgresql : ${{ needs.dynamic-variables.outputs.addon-plan-postgresql }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  notify-mattermost:
    if: ${{ needs.dynamic-variables.outputs.is-mattermost-hooked == 'true' }}
    needs:
      - dynamic-variables
      - deploy
      - additional-services
    uses: ./.github/workflows/_notify-deployment.mattermost.reusable.yml
    with:
      application-full-name: ${{ needs.dynamic-variables.outputs.application-environment-slug }}
      deployed-domain: ${{ needs.deploy.outputs.deployed-domain }}
    secrets:
      MATTERMOST_NOTIFY_HOOK_URL: ${{ secrets.MATTERMOST_NOTIFY_HOOK_URL }}

  notify-discord:
    if: ${{ needs.dynamic-variables.outputs.is-discord-hooked == 'true' }}
    needs:
      - dynamic-variables
      - deploy
      - additional-services
    uses: ./.github/workflows/_notify-deployment.discord.reusable.yml
    with:
      deployer-name: "Scalingo Deployer"
      application-full-name: ${{ needs.dynamic-variables.outputs.application-name }}
      deployed-domain: ${{ needs.dynamic-variables.outputs.deployed-domain }}
    secrets:
      DISCORD_NOTIFY_HOOK_URL: ${{ secrets.DISCORD_NOTIFY_HOOK_URL }}
